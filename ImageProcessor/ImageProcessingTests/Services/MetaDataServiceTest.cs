using ImageProcessor.Services;
using Microsoft.AspNetCore.Http;
using Moq;

namespace ImageProcessingTests.Services;

public class MetaDataServiceTest
{
    private readonly MetaDataService _metaDataService = new();

    private Mock<IFormFile> CreateMockFormFile(string fileName = "test.jpg", string contentType = "image/jpeg", byte[] fileContent = null)
    {
        //TODO: Come back later and set this up with metadata
        var mockFile = new Mock<IFormFile>();
        fileContent ??= [0x01, 0x02, 0x03, 0x04]; // Default minimal content if not provided

        mockFile.Setup(f => f.FileName).Returns(fileName);
        mockFile.Setup(f => f.ContentType).Returns(contentType);
        mockFile.Setup(f => f.Length).Returns(fileContent.Length);

        // Crucial: Set up OpenReadStream to return a new MemoryStream with your test data
        mockFile.Setup(f => f.OpenReadStream())
            .Returns(() => new MemoryStream(fileContent)); // Use a lambda to return a new stream each time if called multiple times

        return mockFile;
    }
    
    [Fact(Skip = "Not implemented yet")]
    public void GetMetaData_Success_ReturnsMetaDataObject()
    {

        var testImageBytes = new byte[] { 0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x03, 0x02, 0x02, 0x03, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x03, 0x03, 0x04, 0x05, 0x08, 0x05, 0x05, 0x04, 0x04, 0x05, 0x0A, 0x07, 0x07, 0x06, 0x08, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12, 0x13, 0x0F, 0x14, 0x18, 0x1B, 0x1A, 0x18, 0x16, 0x16, 0x1A, 0x20, 0x1D, 0x20, 0x1D, 0x1C, 0x1C, 0x20, 0x24, 0x27, 0x29, 0x27, 0x23, 0x25, 0x23, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01, 0x00, 0x01, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00, 0x1F, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7D, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x13, 0x14, 0x06, 0x15, 0x07, 0x21, 0x22, 0x23, 0x08, 0x16, 0x24, 0x31, 0x25, 0x17, 0x26, 0x32, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x09, 0x0A, 0x18, 0x19, 0x1A, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00 }; // A very small, valid JPEG header
        var mockFile = CreateMockFormFile(fileContent: testImageBytes);
        
        var results = _metaDataService.GetBasicMetadata(mockFile.Object);
        Assert.NotNull(results);
        Assert.NotEmpty(results.Metadata);
    }
}